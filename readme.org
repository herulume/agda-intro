#+OPTIONS: num:nil toc:nil

#+REVEAL_TRANS: linear
#+REVEAL_THEME: serif
#+REVEAL_TITLE_SLIDE: <h1>%t</h1>
#+REVEAL_TITLE_SLIDE: <h2>%s</h2>
#+REVEAL_TITLE_SLIDE: <h4>By: %a</h4>

#+Title: Agda
#+Subtitle: Types of types of types of types...
#+Author: @herulume

* whoami
  * Eduardo Jorge Barbosa
  * Masters Student
  * Effectful component-based programming: the case of time
** Where does Agda fit in?
   #+ATTR_HTML: :height 50%, :width 50%
   [[file:./images/agda.png]]
** Where does Agda fit in?
+ Formalise concepts - Programming language
#+BEGIN_SRC haskell
record Semigroup (a : Set) : Set where
  field
    _⊛_ : a → a → a
    associative : ∀ a b c → (a ⊛ b) ⊛ c ≡ a ⊛ (b ⊛ c)

andSemigroup : Semigroup Bool
andSemigroup = record
  { _⊛_ = _∧_
  ; associative = andAssociative
  }
#+END_SRC
** Where does Agda fit in?
+ Formalise proofs - Proof assistant
#+BEGIN_SRC haskell
andAssociative : ∀ a b c → (a ∧ b) ∧ c ≡ a ∧ (b ∧ c)
andAssociative false b c = refl
andAssociative true b c = refl
#+END_SRC
**  Agda
+ Programming language
+ Proof assistant

#+BEGIN_NOTES
Compare with Haskell's syntax (: vs ::, unicode, laws in the records, no typeclasses)
#+END_NOTES

* *Types*, in programming languages, are *propositions*, in intuitionistic logic, and *objects* of a cartesian closed category.
** Types as propositions, programs as proofs
+ Curry-Howard isomorphism
+ Curry-Howard-Lambek correspondence
** Types as propositions, programs as proofs
+ Types = Propositions
+ Programs = Proofs
** Logic vs Haskell vs Agda
| a ∨ b   | Either a b   | Either A B  |
| a ∧ b   | (a, b)       | A × B       |
| a => b  | a -> b       | A → B       |
| a <=> b | isomorphism  | isomorphism |
| False   | Void         | False       |
| True    | ()           | True        |
| ¬a      | a -> Void    | A → False   |
| ∀       | forall       | Π           |
| ∃       | clever trick | Σ           |

* Why not Haskell?
** Haskell's type system
Corresponds to propositional logic
** Is inconsistent as a logic
#+BEGIN_SRC haskell
f :: a -> b
f = unsafeCoerce

what :: a -> b
what = undefined
#+END_SRC
** Functions can be non-terminating
#+BEGIN_SRC haskell
let brexit = brexit
#+END_SRC

* Agda introduction
Agda is a *dependently typed* language with *pure, total functions*.

#+BEGIN_NOTES
Functions in Agda area like functions in mathematics.
#+END_NOTES
** Meaning
+ Pure functions :: The same inputs yield the same outputs (no side effects)
** Meaning
+ Total :: Functions must terminate and be defined for every possible input

#+BEGIN_SRC haskell
-- Brilliant example by Conor McBride
brexit : ⊥
brexit = brexit
#+END_SRC

#+BEGIN_NOTES
Termination matters for proofs.
#+END_NOTES
** Meaning
+ Dependently typed :: Types may depend on values

#+BEGIN_SRC haskell
+-identityʳ : (m : ℕ) → m + zero ≡ m
#+END_SRC

* Syntax
** Set
The type of all boring types
#+BEGIN_SRC haskell
Bool : Set
Nat : Set
List Bool : Set
#+END_SRC
+ Haskell's * (or TYPE)
#+BEGIN_SRC haskell
Bool :: *
Int :: *
[Bool] :: *
#+END_SRC
** Algebraic data types
#+BEGIN_SRC haskell
data Nat : Set where
  zero : Nat
  suc  : Nat → Nat
#+END_SRC
+ GADTs in Haskell
** Algebraic data types
#+BEGIN_SRC haskell
data Nat : Set where
  zero : Nat
  suc  : Nat → Nat
#+END_SRC
+ GADTs in Haskell
#+BEGIN_SRC haskell
{-# LANGUAGE GADTs #-}

data Nat = Zero | Suc Nat

data Nat where
  Zero :: Nat
  Suc  :: Nat -> Nat
#+END_SRC
** A simple function
#+BEGIN_SRC haskell
×-comm : (A : Set) → (B : Set) → (A × B) → (B × A)
×-comm A B (a , b) = (b , a)
#+END_SRC
** A simple function
#+BEGIN_SRC haskell
×-comm : (A B : Set) → (A × B) → (B × A)
×-comm A B (a , b) = (b , a)
#+END_SRC
** A simple function
#+BEGIN_SRC haskell
×-comm : (A B : Set) → (A × B) → (B × A)
×-comm _ _ (a , b) = (b , a)
#+END_SRC
+ Haskell's version
#+BEGIN_SRC haskell
x-comm :: (a, b) -> (b, a)
x-comm (a, b) = (b, a)
#+END_SRC
** Postulate
#+BEGIN_SRC haskell
postulate A B : Set

×-comm : (A × B) → (B × A)
×-comm (a , b) = (b , a)
#+END_SRC

#+BEGIN_NOTES
Coq style
#+END_NOTES
** Implicit arguments
#+BEGIN_SRC haskell
×-comm : {A B : Set} → (A × B) → (B × A)
×-comm (a , b) = (b, a)
#+END_SRC
** Implicit types
#+BEGIN_SRC haskell
×-comm : {A B : Set} → ...
#+END_SRC
** Implicit types
#+BEGIN_SRC haskell
×-comm : {A B : Set} → ...

×-comm : {A B : _} → ...

×-comm : ∀ {A B} → ...
#+END_SRC
** Operators
#+BEGIN_SRC haskell
_+_ : Nat → Nat → Nat
zero  + m = m
suc n + m = suc (n + m)

 3 + 4
 3 +_
#+END_SRC

#+BEGIN_SRC haskell
if_then_else_ : {A : Set} → Bool → A → A → A
if true then x else y = x
if false then x else y = y
#+END_SRC

** Practice!

** Records
#+BEGIN_SRC haskell
record Pair (A B : Set) : Set where
  constructor _,_
  field
    fst : A
    snd : B

make-pair : {A B : Set} → A → B → Pair A B
make-pair a b = record { fst = a ; snd = b }

make-pair : {A B : Set} → A → B → Pair A B
make-pair a b = a , b

proj₁ : {A B : Set} → Pair A B → A
proj₁ p = Pair.fst p

proj₁ : {A B : Set} → Pair A B → A
proj₁ record { fst = a } = p
#+END_SRC
** Co-pattern matching
#+BEGIN_SRC haskell
p23 : Pair Nat Nat
p23 = record { fst = 2; snd = 3 }

p23 : Pair Nat Nat
Pair.fst p23 = 2
Pair.snd p23 = 3
#+END_SRC
** Co-pattern and pattern matching
#+BEGIN_SRC haskell
record Pair (A B : Set) : Set where
  field
    fst : A
    snd : B

make-pair : {A : Set} → ℕ → A → Pair ℕ A
Pair.fst (make-pair 0 _) = 4
Pair.fst (make-pair (suc x) _) = x
Pair.snd (make-pair _ y) = y
#+END_SRC
** Many useful concepts...
+ Co-induction
+ Reflection
+ Rewriting

* Universe levels
** Set
The type of all boring types
+ Haskell's * (or TYPE)

#+BEGIN_SRC haskell
Bool : Set
Nat : Set
List Bool : Set
#+END_SRC
** From the Russell's paradox follows
+ The collection of all sets is not itself a set
** This is inconsistent
#+BEGIN_SRC haskell
Set : Set
#+END_SRC
** Explicit universe levels to the rescue
#+BEGIN_SRC haskell
Int  : Set
Set  : Set₁
Set₁ : Set₂
Set₂ : Set₃
...
#+END_SRC
** Universe Polymorphism
#+BEGIN_SRC haskell
data List {n : Level} (A : Set n) : Set n where
  []   : List A
  _::_ : A → List A → List A

List Nat : Set
List Set : Set₁
List Set₁ : Set₂
#+END_SRC

* Dependent types
Types may depend on values!
** Type checking
+ Values are allowed in dependent types
+ Equality of dependent types may require computations
+ Deciding type equality may involve deciding whether two arbitrary programs produce the same result
+ Type checking can be undecidable!
** It's decidable in Agda
+ Force all programs to terminate
** Back to the good stuff
** First-order logic, quantifiers and oh my
** Logic
+ First-order predicate logic extends propositional logic
+ Propositions may *depend* on terms
** Universal quantifiers (Π-type)
#+BEGIN_SRC haskell
(a : A) → B
#+END_SRC
** An example
#+BEGIN_SRC haskell
p : (n : ℕ) → n >= zero
#+end_src
** There's already notation but...
#+BEGIN_SRC haskell
data Π (A : Set) (B : A → Set) : Set where
  Λ : ((a : A) → B a) → Π A B
#+END_SRC
** Existential quantifier (Σ-type)
Dependent products
#+BEGIN_SRC haskell
data Σ (A : Set) (B : A → Set) : Set where
  ⟨_,_⟩ : (x : A) → B x → Σ A B
#+end_src
** An example
#+BEGIN_SRC haskell
dif : (m : ℕ) → (n : ℕ)
    → m >= n
    → Σ ℕ (λ r → m ≡ (n + r))
#+end_src

* Quintessential example
** Vector
#+BEGIN_SRC haskell
data Vec (A : Set) : Nat → Set where
  []  : Vec A zero
  _∷_ : {n : Nat} → A → Vec A n → Vec A (suc n)
#+END_SRC
+ Indexed data type
** Dependent pattern matching
#+BEGIN_SRC haskell
head : ∀ {n} {A : Set} → Vec A (suc n) → A
head (x ∷ _) = x
#+END_SRC


* Small example
** CP with Agda?
** Some auxiliary definitions
#+BEGIN_SRC haskell
record True : Set where

data _⊕_ (A B : Set) : Set where
  inl : A → A ⊕ B
  inr : B → A ⊕ B

data _×_ (A B : Set) : Set where
  _,_ : A → B → A × B

uncurry : {A B C : Set} → (A → B → C) → A × B → C
uncurry f (x , x₁) = f x x₁

const : {A B : Set} → A → B → A
const x _ = x

-- [_||_] : {A B C : Set} → (A → C) → (B → C) → A ⊕ B → C
[ f || g ] (inl x) = f x
[ f || g ] (inr y) = g y
#+END_SRC
** Polynomial Functors
#+BEGIN_SRC haskell
data Functor : Set₁ where
  |Id|  : Functor
  |K|   : Set → Functor
  _|+|_ : Functor → Functor → Functor
  _|*|_ : Functor → Functor → Functor

|1| = |K| True
#+END_SRC
** Polynomial Functors
#+BEGIN_SRC haskell
map : (F : Functor) {X Y : Set} → (X → Y) → [ F ] X → [ F ] Y
map |Id| f x = f x
map (|K| A) f x = x
map (F |+| G) f (inl x) = inl (map F f x)
map (F |+| G) f (inr x) = inr (map G f x)
map (F |*| G) f (x , y) = map F f x , map G f y
#+END_SRC
** Decode function
#+BEGIN_SRC haskell
[_] : Functor → Set → Set
[ |Id| ] X = X
[ |K| A ] X = A
[ F |+| G ] X = [ F ] X ⊕ [ G ] X
[ F |*| G ] X = [ F ] X × [ G ] X
#+END_SRC
** Least fixed point
#+BEGIN_SRC haskell
data μ_ (F : Functor) : Set where
  <_> : [ F ] (μ F) → μ F
#+END_SRC
** Lists
#+BEGIN_SRC haskell
ListF = λ A → |1| |+| (|K| A) |*| |Id|
List = λ A → μ (ListF A)

nil : {A : Set} → List A
nil = < inl _ >

cons : {A : Set} → A → List A → List A
cons x xs = < inr (x , xs) >
#+END_SRC
** Catamorphisms
#+BEGIN_SRC haskell
cata : (F : Functor) {A : Set} → ([ F ] A → A) → μ F → A
cata F φ < x > = φ (map F (cata' F φ) x)
#+END_SRC
+ Can't verify termination!
** Catamorphisms
#+BEGIN_SRC haskell
mapCata : ∀ {X} F G → ([ G ] X → X) → [ F ] (μ G) → [ F ] X
mapCata |Id| G φ < x > = φ (mapCata G G φ x)
mapCata (|K| A) G φ x = x
mapCata (F |+| F₁) G φ (inl x) = inl (mapCata F G φ x)
mapCata (F |+| F₁) G φ (inr x) = inr (mapCata F₁ G φ x)
mapCata (F |*| F₁) G φ (x , x₁) =
  mapCata F G φ x , mapCata F₁ G φ x₁

⟨|_|⟩ : ∀ {F : Functor} {A : Set} → ([ F ] A → A) → μ F → A
⟨|_|⟩ {F} φ < x > = φ (mapCata F F φ x)
#+END_SRC
** Foldr
#+BEGIN_SRC haskell
foldr : {A B : Set} → (A → B → B) → B → List A → B
foldr f acc  = ⟨| φ |⟩ where
  φ = [ const acc || uncurry f ]
#+END_SRC
** Foldr = id
#+BEGIN_SRC haskell
foldr=id' : ∀ {A} → (L : List A) → foldr cons nil L ≡ id L
foldr=id' < inl _ > = refl
foldr=id' < inr (x , xs) > with foldr=id xs
foldr=id' < inr (x , < x₁ >) > | z =
  cong (λ r → < inr (x , r) >) z
#+END_SRC
* Thank you!
